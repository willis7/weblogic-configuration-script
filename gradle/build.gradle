import com.oracle.wlst.WLST

/*******************************************************************
 LOAD PROJECT CONFIGURATION

 ********************************************************************/
def configEnv = project.hasProperty( 'configEnv' ) ? project.getProperty( 'configEnv' ) : 'LOCAL'
logger.quiet "Config Env --> #${configEnv}#"

def configAction = project.hasProperty( 'configAction' ) ? project.getProperty( 'configAction' ) : null
logger.quiet "Config Action --> #${configAction}#"



/*******************************************************************
 PROJECT TASKS

 ********************************************************************/

tasks.withType( WLST ) {
    debug false
    failOnError true
    properties "../conf/${configEnv}_wlst.properties"
}

task cleanManagedServerConfig( type: WLST ){
    group 'Weblogic WLST'

    fileName "../wlst/serverCleanConfig.py"
}

task createManagedServerConfig ( type: WLST, dependsOn: cleanManagedServerConfig ) {
    group 'Weblogic WLST'

    fileName "../wlst/serverConfig.py"
}

task bkpClasspathConfig ( type: WLST ){
    group 'Weblogic WLST'

    if( configAction == 'SET'||'SAVE' ){
        fileName "../wlst/classpathBkpConfig.py"
    }
    else {
        logger.quiet "Invalid configuration action ${configAction}"
        return
    }
}

task createClasspathConfig( type: WLST, dependsOn: bkpClasspathConfig ) {
    group 'Weblogic WLST'

    if( configAction != 'SET' ){
        arguments "../conf"
        fileName "../wlst/classpathSetConfig.py"
    }
    else {
        logger.quiet "Invalid configuration action ${configAction}"
        return
    }
}

task bkpVMArgsConfig( type: WLST ) {
    group 'Weblogic WLST'

    if( configAction == 'SET'||'SAVE' ){
        fileName "../wlst/vmArgsBkpConfig.py"
    }
    else {
        logger.quiet "Invalid configuration action ${configAction}"
        return
    }
}

task createVMArgsConfig ( type: WLST, dependsOn: bkpVMArgsConfig ){
    group 'Weblogic WLST'

    if( configAction != 'SET' ){
        fileName "../wlst/vmArgsSetConfig.py"
    }
    else {
        logger.quiet "Invalid configuration action ${configAction}"
        return
    }
}